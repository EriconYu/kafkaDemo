package com.stackbang.iot.kafka.configure;import org.apache.kafka.clients.producer.Partitioner;import org.apache.kafka.common.Cluster;import org.apache.kafka.common.PartitionInfo;import java.util.List;import java.util.Map;import java.util.Random;// 对key进行求余，得到对应的分片位置，保证指定的数据能够落到指定的分片上，从而实现有序public class VehiclePartitioner implements Partitioner {    @Override    public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) {        List<PartitionInfo> partitions = cluster.partitionsForTopic(topic);        int numPartitions = partitions.size();        if (key == null) {            Random rand = new Random();            return rand.nextInt(numPartitions);        }        int floorMod = Math.floorMod(key.hashCode(), numPartitions);        return floorMod;    }    @Override    public void close() {    }    @Override    public void configure(Map<String, ?> configs) {    }}